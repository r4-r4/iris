"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Download, FileText, FileDown, Save } from "lucide-react"

interface ExportButtonProps {
  content: string
  filename: string
  title?: string
}

export function ExportButton({ content, filename, title = "Generated Content" }: ExportButtonProps) {
  const [isExporting, setIsExporting] = useState(false)

  const exportAsText = () => {
    const blob = new Blob([content], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${filename}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const exportAsHTML = () => {
    const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <title>${title}</title>
    <style>
        body { font-family: 'JetBrains Mono', monospace; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
        h1, h2, h3 { color: #1e40af; }
        .header { border-bottom: 2px solid #06b6d4; padding-bottom: 10px; margin-bottom: 20px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>${title}</h1>
        <p>Generated by Iris AI Assistant</p>
    </div>
    <div class="content">
        <pre style="white-space: pre-wrap; font-family: inherit;">${content}</pre>
    </div>
</body>
</html>`

    const blob = new Blob([htmlContent], { type: "text/html" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${filename}.html`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const exportAsMarkdown = () => {
    const markdownContent = `# ${title}\n\n*Generated by Iris AI Assistant*\n\n---\n\n${content}`
    const blob = new Blob([markdownContent], { type: "text/markdown" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${filename}.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  if (!content) return null

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="bg-slate-700/50 border-slate-600 text-white hover:bg-slate-600/50"
        >
          <Download className="w-4 h-4 mr-2" />
          Export
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="bg-slate-800 border-slate-600">
        <DropdownMenuItem onClick={exportAsText} className="text-white hover:bg-slate-700">
          <FileText className="w-4 h-4 mr-2" />
          Export as Text (.txt)
        </DropdownMenuItem>
        <DropdownMenuItem onClick={exportAsHTML} className="text-white hover:bg-slate-700">
          <FileDown className="w-4 h-4 mr-2" />
          Export as HTML (.html)
        </DropdownMenuItem>
        <DropdownMenuItem onClick={exportAsMarkdown} className="text-white hover:bg-slate-700">
          <Save className="w-4 h-4 mr-2" />
          Export as Markdown (.md)
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
