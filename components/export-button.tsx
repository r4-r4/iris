"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Download, FileText, FileDown, FileType } from "lucide-react"

interface ExportButtonProps {
  content: string
  filename: string
  title?: string
}

export function ExportButton({ content, filename, title = "Generated Content" }: ExportButtonProps) {
  const [isExporting, setIsExporting] = useState(false)

  const downloadFile = (content: string, fileName: string, mimeType: string) => {
    try {
      // Create blob with proper encoding
      const blob = new Blob([content], { type: `${mimeType};charset=utf-8` })

      // Check if we're in a browser environment
      if (typeof window !== "undefined" && window.document) {
        const url = window.URL.createObjectURL(blob)
        const link = window.document.createElement("a")
        link.href = url
        link.download = fileName
        link.style.display = "none"

        // Append to body, click, and remove
        window.document.body.appendChild(link)
        link.click()

        // Clean up with timeout to ensure download starts
        setTimeout(() => {
          if (window.document.body.contains(link)) {
            window.document.body.removeChild(link)
          }
          window.URL.revokeObjectURL(url)
        }, 100)
      }
    } catch (error) {
      console.error("Download failed:", error)
      // Fallback: try to open in new window
      try {
        const blob = new Blob([content], { type: `${mimeType};charset=utf-8` })
        const url = window.URL.createObjectURL(blob)
        window.open(url, "_blank")
      } catch (fallbackError) {
        console.error("Fallback download also failed:", fallbackError)
        alert("Download failed. Please try again.")
      }
    }
  }

  const exportAsText = async () => {
    setIsExporting(true)
    try {
      const textContent = `${title}\n${"=".repeat(title.length)}\n\nGenerated by Iris AI Assistant\nDate: ${new Date().toLocaleDateString()}\n\n${content}`
      downloadFile(textContent, `${filename}.txt`, "text/plain")
    } catch (error) {
      console.error("Text export failed:", error)
    } finally {
      setIsExporting(false)
    }
  }

  const exportAsHTML = async () => {
    setIsExporting(true)
    try {
      const htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body { 
            font-family: 'JetBrains Mono', 'Courier New', monospace; 
            line-height: 1.6; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 20px;
            background: #0f172a;
            color: #e2e8f0;
        }
        .header { 
            border-bottom: 2px solid #06b6d4; 
            padding-bottom: 20px; 
            margin-bottom: 30px; 
            text-align: center;
        }
        .logo {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, #1e40af, #06b6d4);
            border-radius: 12px;
            margin: 0 auto 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            font-weight: bold;
            color: white;
            box-shadow: 0 8px 32px rgba(6, 182, 212, 0.3);
        }
        h1 { 
            color: #06b6d4; 
            margin: 0; 
            font-size: 2.5em;
            text-shadow: 0 2px 4px rgba(6, 182, 212, 0.3);
        }
        .subtitle { 
            color: #94a3b8; 
            margin: 10px 0 0 0; 
            font-style: italic;
        }
        .date {
            color: #64748b;
            font-size: 0.9em;
            margin-top: 10px;
        }
        .content { 
            background: #1e293b;
            padding: 30px;
            border-radius: 12px;
            border: 1px solid #334155;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
        }
        pre { 
            white-space: pre-wrap; 
            font-family: inherit; 
            margin: 0;
            color: #e2e8f0;
            line-height: 1.8;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #334155;
            color: #64748b;
            font-size: 0.9em;
        }
        @media print {
            body { background: white; color: black; }
            .content { background: #f8fafc; border: 1px solid #e2e8f0; }
            .logo { background: #1e40af; }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">IRIS</div>
        <h1>${title}</h1>
        <p class="subtitle">Generated by Iris AI Content Creator Assistant</p>
        <p class="date">Generated on ${new Date().toLocaleDateString()}</p>
    </div>
    <div class="content">
        <pre>${content}</pre>
    </div>
    <div class="footer">
        <p>Powered by Google Gemini AI • Built for Content Creators</p>
    </div>
</body>
</html>`

      downloadFile(htmlContent, `${filename}.html`, "text/html")
    } catch (error) {
      console.error("HTML export failed:", error)
    } finally {
      setIsExporting(false)
    }
  }

  const exportAsWord = async () => {
    setIsExporting(true)
    try {
      const wordContent = `<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">
<head>
<meta charset="utf-8">
<title>${title}</title>
<!--[if gte mso 9]>
<xml>
<w:WordDocument>
<w:View>Print</w:View>
<w:Zoom>90</w:Zoom>
<w:DoNotPromptForConvert/>
<w:DoNotShowInsertionsAndDeletions/>
</w:WordDocument>
</xml>
<![endif]-->
<style>
@page {
    margin: 1in;
    size: 8.5in 11in;
}
body {
    font-family: 'JetBrains Mono', 'Courier New', monospace;
    font-size: 11pt;
    line-height: 1.6;
    color: #000;
}
.header {
    text-align: center;
    border-bottom: 3pt solid #06b6d4;
    padding-bottom: 20pt;
    margin-bottom: 30pt;
}
.logo {
    width: 100pt;
    height: 100pt;
    background: linear-gradient(135deg, #1e40af, #06b6d4);
    border-radius: 12pt;
    margin: 0 auto 20pt;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 36pt;
    font-weight: bold;
    color: white;
    text-align: center;
    line-height: 100pt;
}
h1 {
    color: #1e40af;
    font-size: 28pt;
    margin: 0;
    font-weight: bold;
}
.subtitle {
    color: #666;
    font-style: italic;
    margin: 10pt 0;
    font-size: 12pt;
}
.date {
    color: #888;
    font-size: 10pt;
    margin-top: 10pt;
}
.content {
    background: #f8fafc;
    padding: 20pt;
    border: 1pt solid #e2e8f0;
    border-radius: 8pt;
    margin: 20pt 0;
}
.footer {
    text-align: center;
    margin-top: 40pt;
    padding-top: 20pt;
    border-top: 1pt solid #e2e8f0;
    color: #666;
    font-size: 10pt;
}
.iris-watermark {
    position: fixed;
    bottom: 20pt;
    right: 20pt;
    opacity: 0.05;
    font-size: 72pt;
    color: #06b6d4;
    z-index: -1;
    transform: rotate(-45deg);
}
</style>
</head>
<body>
<div class="header">
    <div class="logo">IRIS</div>
    <h1>${title}</h1>
    <p class="subtitle">Generated by Iris AI Content Creator Assistant</p>
    <p class="date">Generated on ${new Date().toLocaleDateString()}</p>
</div>

<div class="content">
    <pre style="white-space: pre-wrap; font-family: inherit; margin: 0;">${content}</pre>
</div>

<div class="footer">
    <p><strong>About Iris AI Assistant</strong></p>
    <p>Iris is an AI-powered content creator assistant that helps you generate trending video ideas, analyze video quality, provide smart content tips, and write optimized scripts and captions.</p>
    <p style="margin-top: 20pt;">
        <em>Powered by Google Gemini AI • Built for Content Creators</em>
    </p>
</div>

<div class="iris-watermark">IRIS</div>
</body>
</html>`

      downloadFile(wordContent, `${filename}.doc`, "application/msword")
    } catch (error) {
      console.error("Word export failed:", error)
    } finally {
      setIsExporting(false)
    }
  }

  const exportAsMarkdown = async () => {
    setIsExporting(true)
    try {
      const markdownContent = `# ${title}

*Generated by Iris AI Assistant*  
*Date: ${new Date().toLocaleDateString()}*

---

${content}

---

**About Iris AI Assistant**

Iris is an AI-powered content creator assistant that helps you:
- Generate trending video ideas
- Analyze video quality and engagement
- Provide smart content tips  
- Write optimized scripts and captions

*Powered by Google Gemini AI • Built for Content Creators*`

      downloadFile(markdownContent, `${filename}.md`, "text/markdown")
    } catch (error) {
      console.error("Markdown export failed:", error)
    } finally {
      setIsExporting(false)
    }
  }

  // Don't render if no content
  if (!content) return null

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="bg-slate-700/50 border-slate-600 text-white hover:bg-slate-600/50 transition-all duration-200"
          disabled={isExporting}
        >
          <Download className="w-4 h-4 mr-2" />
          {isExporting ? "Exporting..." : "Export"}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="bg-slate-800 border-slate-600">
        <DropdownMenuItem onClick={exportAsWord} className="text-white hover:bg-slate-700 cursor-pointer">
          <FileType className="w-4 h-4 mr-2" />
          Export as Word (.doc)
        </DropdownMenuItem>
        <DropdownMenuItem onClick={exportAsHTML} className="text-white hover:bg-slate-700 cursor-pointer">
          <FileDown className="w-4 h-4 mr-2" />
          Export as HTML (.html)
        </DropdownMenuItem>
        <DropdownMenuItem onClick={exportAsMarkdown} className="text-white hover:bg-slate-700 cursor-pointer">
          <FileText className="w-4 h-4 mr-2" />
          Export as Markdown (.md)
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
