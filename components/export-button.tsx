"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Download, FileText, FileDown, FileType } from "lucide-react"

interface ExportButtonProps {
  content: string
  filename: string
  title?: string
}

export function ExportButton({ content, filename, title = "Generated Content" }: ExportButtonProps) {
  const [isExporting, setIsExporting] = useState(false)

  const downloadFile = (blob: Blob, fileName: string) => {
    try {
      const url = URL.createObjectURL(blob)
      const a = document.createElement("a")
      a.href = url
      a.download = fileName
      a.style.display = "none"
      document.body.appendChild(a)
      a.click()

      // Clean up
      setTimeout(() => {
        document.body.removeChild(a)
        URL.revokeObjectURL(url)
      }, 100)
    } catch (error) {
      console.error("Download failed:", error)
      // Fallback: open in new tab
      const url = URL.createObjectURL(blob)
      window.open(url, "_blank")
    }
  }

  const exportAsText = async () => {
    setIsExporting(true)
    try {
      const textContent = `${title}\n${"=".repeat(title.length)}\n\nGenerated by Iris AI Assistant\n\n${content}`
      const blob = new Blob([textContent], { type: "text/plain;charset=utf-8" })
      downloadFile(blob, `${filename}.txt`)
    } catch (error) {
      console.error("Text export failed:", error)
    } finally {
      setIsExporting(false)
    }
  }

  const exportAsHTML = async () => {
    setIsExporting(true)
    try {
      const htmlContent = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body { 
            font-family: 'JetBrains Mono', 'Courier New', monospace; 
            line-height: 1.6; 
            max-width: 800px; 
            margin: 0 auto; 
            padding: 20px;
            background: #0f172a;
            color: #e2e8f0;
        }
        .header { 
            border-bottom: 2px solid #06b6d4; 
            padding-bottom: 20px; 
            margin-bottom: 30px; 
            text-align: center;
        }
        .logo {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #1e40af, #06b6d4);
            border-radius: 12px;
            margin: 0 auto 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
            color: white;
        }
        h1 { color: #06b6d4; margin: 0; }
        .subtitle { color: #94a3b8; margin: 10px 0 0 0; }
        .content { 
            background: #1e293b;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #334155;
        }
        pre { 
            white-space: pre-wrap; 
            font-family: inherit; 
            margin: 0;
            color: #e2e8f0;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">IRIS</div>
        <h1>${title}</h1>
        <p class="subtitle">Generated by Iris AI Assistant</p>
    </div>
    <div class="content">
        <pre>${content}</pre>
    </div>
</body>
</html>`

      const blob = new Blob([htmlContent], { type: "text/html;charset=utf-8" })
      downloadFile(blob, `${filename}.html`)
    } catch (error) {
      console.error("HTML export failed:", error)
    } finally {
      setIsExporting(false)
    }
  }

  const exportAsWord = async () => {
    setIsExporting(true)
    try {
      // Create Word document content using HTML format that Word can read
      const wordContent = `
<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">
<head>
<meta charset="utf-8">
<title>${title}</title>
<!--[if gte mso 9]>
<xml>
<w:WordDocument>
<w:View>Print</w:View>
<w:Zoom>90</w:Zoom>
<w:DoNotPromptForConvert/>
<w:DoNotShowInsertionsAndDeletions/>
</w:WordDocument>
</xml>
<![endif]-->
<style>
@page {
    margin: 1in;
}
body {
    font-family: 'JetBrains Mono', 'Courier New', monospace;
    font-size: 11pt;
    line-height: 1.6;
    color: #000;
}
.header {
    text-align: center;
    border-bottom: 2px solid #06b6d4;
    padding-bottom: 20px;
    margin-bottom: 30px;
}
.logo {
    width: 80px;
    height: 80px;
    background: linear-gradient(135deg, #1e40af, #06b6d4);
    border-radius: 12px;
    margin: 0 auto 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 32px;
    font-weight: bold;
    color: white;
}
h1 {
    color: #1e40af;
    font-size: 24pt;
    margin: 0;
}
.subtitle {
    color: #666;
    font-style: italic;
    margin: 10px 0;
}
.content {
    background: #f8fafc;
    padding: 20px;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
}
.iris-watermark {
    position: fixed;
    bottom: 20px;
    right: 20px;
    opacity: 0.1;
    font-size: 48pt;
    color: #06b6d4;
    z-index: -1;
}
</style>
</head>
<body>
<div class="header">
    <div class="logo">IRIS</div>
    <h1>${title}</h1>
    <p class="subtitle">Generated by Iris AI Content Creator Assistant</p>
    <p style="font-size: 9pt; color: #888;">Generated on ${new Date().toLocaleDateString()}</p>
</div>

<div class="content">
    <pre style="white-space: pre-wrap; font-family: inherit;">${content}</pre>
</div>

<div class="iris-watermark">IRIS AI</div>

<div style="page-break-before: always; text-align: center; margin-top: 50px;">
    <h2 style="color: #1e40af;">About Iris AI Assistant</h2>
    <p>Iris is an AI-powered content creator assistant that helps you:</p>
    <ul style="text-align: left; display: inline-block;">
        <li>Generate trending video ideas</li>
        <li>Analyze video quality and engagement</li>
        <li>Provide smart content tips</li>
        <li>Write optimized scripts and captions</li>
    </ul>
    <p style="margin-top: 30px; font-style: italic; color: #666;">
        Powered by Google Gemini AI â€¢ Built for Content Creators
    </p>
</div>
</body>
</html>`

      const blob = new Blob([wordContent], {
        type: "application/vnd.openxmlformats-officedocument.wordprocessingml.document;charset=utf-8",
      })
      downloadFile(blob, `${filename}.doc`)
    } catch (error) {
      console.error("Word export failed:", error)
    } finally {
      setIsExporting(false)
    }
  }

  const exportAsMarkdown = () => {
    const markdownContent = `# ${title}\n\n*Generated by Iris AI Assistant*\n\n---\n\n${content}`
    const blob = new Blob([markdownContent], { type: "text/markdown" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${filename}.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  if (!content) return null

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="bg-slate-700/50 border-slate-600 text-white hover:bg-slate-600/50"
          disabled={isExporting}
        >
          <Download className="w-4 h-4 mr-2" />
          {isExporting ? "Exporting..." : "Export"}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="bg-slate-800 border-slate-600">
        <DropdownMenuItem onClick={exportAsWord} className="text-white hover:bg-slate-700">
          <FileType className="w-4 h-4 mr-2" />
          Export as Word (.doc)
        </DropdownMenuItem>
        <DropdownMenuItem onClick={exportAsHTML} className="text-white hover:bg-slate-700">
          <FileDown className="w-4 h-4 mr-2" />
          Export as HTML (.html)
        </DropdownMenuItem>
        <DropdownMenuItem onClick={exportAsMarkdown} className="text-white hover:bg-slate-700">
          <FileText className="w-4 h-4 mr-2" />
          Export as Markdown (.md)
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
